# vim: set ft=yaml.ansible:
---
- name: Remove all partitions and wipe the disk
  hosts:
    - metal
    - :&{{ wipe_target }}
  become: true # redundant since we're running as root, but good practice
  gather_facts: no # no need to gather all facts initially, we'll get what we need

  vars:
    # !!! CRITICAL: Replace with the EXACT path to the disk you want to wipe !!!
    # Based on your lsblk output, this is your primary OS disk.
    # e.g., "/dev/sda", "/dev/sdb", "/dev/nvme0n1"
    target_disk: "{{ hostvars['disk'] }}"

  tasks:
    - name: Check if target_disk variable is defined
      assert:
        that:
          - target_disk is defined
          - target_disk | length > 0
        fail_msg: "ERROR: 'target_disk' variable is undefined or empty."

    - name: Verify target disk exists on the remote host
      stat:
        path: "{{ target_disk }}"
      register: disk_stat
      failed_when: not disk_stat.stat.exists or not disk_stat.stat.isblk
      changed_when: false

    - name: Get current disk and partition information
      command: lsblk -J -o NAME,PATH,SIZE,FSTYPE,MOUNTPOINT,PARTTYPE,UUID
      register: lsblk_output
      changed_when: false

    - name: Display current disk information (CRITICAL REVIEW STEP)
      debug:
        msg: |
          ATTENTION: You are about to perform a destructive operation on {{ target_disk }}.
          Current disk info:
          {{ lsblk_output.stdout | from_json | to_nice_yaml }}

    - name: Get root filesystem device (for additional safety check)
      command: findmnt -n -o SOURCE /
      register: root_fs_source
      changed_when: false
      failed_when: false # allow to proceed if findmnt isn't available or fails

    - name: Perform a final safety confirmation before wipe
      pause:
        prompt: |
          ****************************************************************************
          *
          *   !!! WARNING: YOU ARE ABOUT TO WIPE ALL DATA ON {{ target_disk }} !!!
          *
          *   The root filesystem is currently on: {{ root_fs_source.stdout | default('UNKNOWN') }}
          *   Ensure {{ target_disk }} is NOT the disk you want to preserve.
          *
          *   Type 'YES' (case-sensitive) to proceed, or anything else to abort.
          *
          ****************************************************************************
        echo: true
      register: confirmation_raw
      when: target_disk is defined

    - name: Store confirmation input for later use
      set_fact:
        proceed_with_wipe: "{{ confirmation_raw.user_input | default('') == 'YES' }}"
      when: confirmation_raw is defined # only set if pause task ran

    - name: Abort if user did not confirm 'YES'
      fail:
        msg: "Disk wipe operation aborted by user confirmation."
      when: not proceed_with_wipe

    # --- START OF DESTRUCTIVE ACTIONS ---
    # These tasks will only run if 'proceed_with_wipe' is true

    # TODO: this should be platform-agnostic (e.g. on ubuntu the package is called sgdisk)
    - name: Ensure necessary packages are present
      dnf:
        name:
          - gdisk # sgdisk
          - util-linux # fdisk, sfdisk, ...
        state: present

    - name: Stop all swap activity on the system
      command: swapoff -a
      changed_when: true
      failed_when: false # don't fail if no swap is active or already stopped

    - name: Disconnect any mounted non-root partitions on the target disk
      command: umount -f {{ item.mountpoint }}
      loop: "{{ lsblk_output.stdout | from_json | json_query('blockdevices[?starts_with(path, `' + target_disk + '`) && mountpoint
        != null && mountpoint != `` && mountpoint != `/`]') }}"
      loop_control:
        label: "Unmounting {{ item.mountpoint }}"
      changed_when: true
      failed_when: false # don't fail if already unmounted or not present
      ignore_errors: true # try to unmount, but don't stop if it fails for some reason

    # - name: Delete all partition tables and data with sgdisk
    #   command: sgdisk --zap-all {{ target_disk }}
    #   changed_when: true

    - name: Delete all partition tables and data with sfdisk
      command: sfdisk --delete {{ target_disk }}
      changed_when: true

    # NOTE: We run this as part of kickstart when (re-)installing the OS
    # - name: Wipe filesystem, RAID, and LVM signatures from the entire disk
    #   command: wipefs -a {{ target_disk }}
    #   changed_when: true
    #   # This task might still fail occasionally due to stubborn kernel references
    #   # on extremely busy root disks. If it does, a reboot is the final solution.
    #   failed_when: false

    - name: Sync disk to ensure all changes are written
      command: "sync"
      changed_when: false

    - name: Shutdown the server
      community.general.shutdown:

    - name: Notify successful disk wipe
      debug:
        msg: >-
          Disk {{ target_disk }} has been successfully wiped and prepared for reinstallation.
          The {{ inventory_hostname }} server has been powered off and is now ready for a fresh OS install.

