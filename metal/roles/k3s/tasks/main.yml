---
- name: Get a list of all node objects
  kubernetes.core.k8s_info:
    kind: Node
    label_selectors:
      - node-role.kubernetes.io/control-plane = true
  register: node_list
  delegate_to: localhost
  run_once: true
  failed_when: false
  ignore_errors: true

- name: Filter for ready nodes
  set_fact:
    control_nodes: "{{ node_list.resources | json_query(_q) | map(attribute='metadata.name') | list }}" # noqa jinja
  vars:
    _q: "[?status.conditions[?type=='Ready' && status=='True']]"
  when: node_list | length > 0
  delegate_to: localhost
  run_once: true

- name: Set controller_exists fact
  set_fact:
    controller_exists: "{{ (control_nodes is defined) and (control_nodes | length > 0) }}"
  delegate_to: localhost
  run_once: true

- name: Set control plane node
  set_fact:
    control_plane_node: |-
      {%- if controller_exists -%}
        {{ control_nodes | first }}
      {%- else -%}
        {{ groups['control_plane'] | first }}
      {%- endif -%}
  run_once: true

- name: Get k3s binary
  get_url:
    url: https://github.com/k3s-io/k3s/releases/download/{{ k3s_version }}/k3s
    checksum: sha256:https://github.com/k3s-io/k3s/releases/download/{{ k3s_version }}/sha256sum-amd64.txt
    dest: "{{ role_path }}/files/bin/k3s"
    mode: "0755"
  delegate_to: localhost
  run_once: true
  register: k3s_binary

- name: Copy k3s binary to nodes
  copy:
    src: bin/k3s
    dest: /usr/local/bin/k3s
    owner: root
    group: root
    mode: "0755"

- name: Ensure config directories exist
  file:
    path: "{{ item }}"
    state: directory
    mode: "0755"
  loop:
    - /etc/rancher/k3s
    - /etc/rancher/node
    - "{{ k3s_data_dir }}/agent/pod-manifests"

- name: Check if k3s token file exists on {{ control_plane_node }}
  stat:
    path: "{{ k3s_token_file }}"
  delegate_to: "{{ control_plane_node }}"
  run_once: true
  register: _token_file

- name: Generate the definitive k3s token file
  copy:
    # Uses random.SystemRandom, so should be strong enough for cryptographic purposes.
    # ref: https://docs.ansible.com/ansible/latest/collections/community/general/random_string_lookup.html#synopsis
    content: "{{ lookup('community.general.random_string', length=32) }}" # TODO: longer password length?
    dest: "{{ k3s_token_file }}"
    mode: "0600"
  delegate_to: "{{ control_plane_node }}"
  run_once: true
  when: not _token_file.stat.exists

- name: Get the definitive k3s token
  slurp:
    src: "{{ k3s_token_file }}"
  register: _token_slurped
  delegate_to: "{{ control_plane_node }}"
  run_once: true

- name: Set fact for the definitive cluster token
  set_fact:
    definitive_k3s_cluster_token: "{{ _token_slurped.content | b64decode | trim }}"
  run_once: true

- name: Ensure token on all nodes
  copy:
    content: "{{ definitive_k3s_cluster_token }}"
    dest: "{{ k3s_token_file }}"
    mode: "0600"

- name: Copy k3s server config file to control_plane nodes
  template:
    src: config.yaml.j2
    dest: "{{ k3s_config_file }}"
    mode: "0644"
  when: "'control_plane' in group_names"

- name: Copy k3s systemd service file to all nodes
  template:
    src: k3s.service.j2
    dest: "{{ k3s_service_file }}"
    mode: "0644"

- name: Copy kube-vip manifests
  when: "'control_plane' in group_names"
  template:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
    mode: "0644"
  loop:
    - src: kube-vip.yaml.j2
      dest: "{{ k3s_data_dir }}/agent/pod-manifests/kube-vip.yaml"

- name: Enable k3s service and ensure it is started
  systemd_service:
    name: k3s
    enabled: true
    state: started
    daemon_reload: true # Good to have if the service file might change
  register: k3s_service
  until: k3s_service is succeeded # Ensure it actually starts
  retries: 5
  delay: 10
  notify: Restart k3s # Though starting it here might make immediate restart redundant unless failed

- name: Fetch kubeconfig from control plane
  when:
    - not controller_exists
    - "'control_plane' in group_names"
  block:
    # This task should only run ONCE on the selected control plane node
    - name: Wait for K3s API server to be ready on {{ control_plane_node }}
      when: inventory_hostname == control_plane_node
      wait_for:
        host: "{{ hostvars[inventory_hostname]['ansible_host'] }}" # Check the local node
        port: 6443
        delay: 15 # Initial delay
        timeout: 300 # 5 minutes timeout
      run_once: true # Ensures this wait_for runs only once across all control plane nodes

    # This task will now run on each control plane node, but we only care about the result from the selected one.
    # The run_once: true on the copy task will handle using only one fetched result.
    - name: Get Kubernetes config file from {{ control_plane_node }}
      slurp:
        src: "{{ k3s_kubeconfig_file }}" # /etc/rancher/k3s/k3s.yaml
      register: _kubeconfig_slurped
      when: inventory_hostname == control_plane_node # Fetch ONLY from the selected control plane node

    - name: Set fact for kubeconfig content # to make it available to run_once delegate_to task
      set_fact:
        kubeconfig_content: "{{ _kubeconfig_slurped.content | b64decode | replace('127.0.0.1', control_plane_endpoint) }}"
      when: inventory_hostname == control_plane_node # Only set fact on the node that fetched it

    - name: Write kubeconfig file to Ansible controller
      copy:
        content: "{{ hostvars[control_plane_node]['kubeconfig_content'] }}" # Get content from the selected CP node's facts
        dest: "{{ playbook_dir }}/kubeconfig.yaml" # Your Makefile uses kubeconfig.yaml
        mode: "0600"
      delegate_to: localhost
      run_once: true # CRITICAL: This ensures the file is written only once using data from the control plane node
      when:
        - kubeconfig_content is defined
        - kubeconfig_content
      # End of block for control plane kubeconfig fetching
