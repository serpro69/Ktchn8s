---
- name: Automate Disk Partition Removal for OS Reinstallation
  hosts: test # Replace with your target host or group
  become: yes # Required for disk operations
  gather_facts: no # No need to gather all facts initially, we'll get what we need

  vars:
    # !!! CRITICAL: Replace with the EXACT path to the disk you want to wipe !!!
    # Based on your lsblk output, this is your primary OS disk.
    # e.g., "/dev/sda", "/dev/sdb", "/dev/nvme0n1"
    target_disk: "/dev/nvme0n1"

  tasks:
    - name: Check if target_disk variable is defined
      ansible.builtin.assert:
        that:
          - target_disk is defined
          - target_disk | length > 0
        fail_msg: "ERROR: 'target_disk' variable is not defined or is empty. This is crucial for safety."
      tags: safety_check

    - name: Verify target disk exists on the remote host
      ansible.builtin.stat:
        path: "{{ target_disk }}"
      register: disk_stat
      failed_when: not disk_stat.stat.exists or not disk_stat.stat.isblk
      changed_when: false
      tags: safety_check

    - name: Get current disk and partition information
      ansible.builtin.command: "lsblk -J -o NAME,PATH,SIZE,FSTYPE,MOUNTPOINT,PARTTYPE,UUID"
      register: lsblk_output
      changed_when: false
      tags: safety_check

    - name: Display current disk information (CRITICAL REVIEW STEP)
      ansible.builtin.debug:
        msg: |
          "ATTENTION: You are about to perform a destructive operation on {{ target_disk }}.
          Current disk info:
          {{ lsblk_output.stdout | from_json | to_nice_yaml }}"
      tags: safety_check

    - name: Get root filesystem device (for additional safety check)
      ansible.builtin.command: "findmnt -n -o SOURCE /"
      register: root_fs_source
      changed_when: false
      failed_when: false # Allow to proceed if findmnt isn't available or fails
      tags: safety_check

    - name: Perform a final safety confirmation before wipe
      ansible.builtin.pause:
        prompt: |
          "******************************************************************
          *                                                                *
          *    WARNING: YOU ARE ABOUT TO WIPE ALL DATA ON {{ target_disk }}  *
          *                                                                *
          *    The root filesystem is currently on: {{ root_fs_source.stdout | default('UNKNOWN') }}   *
          *    Ensure {{ target_disk }} is NOT the OS disk you want to preserve. *
          *                                                                *
          *    Type 'YES' (case-sensitive) to proceed, or anything else to abort. *
          *                                                                *
          ******************************************************************"
        echo: no # Don't echo user input
      register: confirmation_raw
      when: target_disk is defined
      tags: safety_check

    - name: Store confirmation input for later use
      ansible.builtin.set_fact:
        proceed_with_wipe: "{{ confirmation_raw.user_input | default('') == 'YES' }}" # Use 'YES' as per prompt
      when: confirmation_raw is defined # Only set if pause task ran
      tags: safety_check

    - name: Abort if user did not confirm 'YES'
      ansible.builtin.fail:
        msg: "Disk wipe operation aborted by user confirmation."
      when: not proceed_with_wipe
      tags: safety_check

    # --- START OF DESTRUCTIVE ACTIONS ---
    # These tasks will only run if 'proceed_with_wipe' is true

    - name: Ensure gdisk is installed (for sgdisk)
      package: # Use 'package' module for distro-agnostic installation
        name: gdisk
        state: present
      when: proceed_with_wipe
      tags: wipe

    - name: Stop all swap activity on the system
      ansible.builtin.command: "swapoff -a"
      changed_when: true
      failed_when: false # Don't fail if no swap is active or already stopped
      when: proceed_with_wipe
      tags: wipe

    - name: Disconnect any mounted non-root partitions on the target disk
      ansible.builtin.command: "umount -f {{ item.mountpoint }}"
      loop: "{{ lsblk_output.stdout | from_json | json_query('blockdevices[?starts_with(path, `' + target_disk + '`) && mountpoint
        != null && mountpoint != `` && mountpoint != `/`]') }}"
      loop_control:
        label: "Unmounting {{ item.mountpoint }}"
      changed_when: true
      failed_when: false # Don't fail if already unmounted or not present
      ignore_errors: true # Try to unmount, but don't stop if it fails for some reason
      when: proceed_with_wipe
      tags: wipe

    - name: Forcefully clear all GPT/MBR partition tables and data with sgdisk
      # sgdisk --zap-all clears all partition table entries, MBR, GPT, and protective MBR.
      # This effectively "removes all existing partitions" and "creates a new partition table" in one brutal step.
      # This is the most reliable way to wipe a live boot disk for reinstallation.
      ansible.builtin.command: "sgdisk --zap-all {{ target_disk }}"
      changed_when: true
      when: proceed_with_wipe
      tags: wipe

    - name: Sync disk after partition table wipe
      ansible.builtin.command: "sync"
      changed_when: false
      when: proceed_with_wipe
      tags: wipe

    # Moved this task UP, so it runs BEFORE wipefs
    - name: Zero out the first 2MB of the disk to clear residual bootloaders/headers
      ansible.builtin.command: "dd if=/dev/zero of={{ target_disk }} bs=1M count=2"
      changed_when: true
      when: proceed_with_wipe
      tags: wipe

    - name: Wipe filesystem, RAID, and LVM signatures from the entire disk
      ansible.builtin.command: "wipefs -a {{ target_disk }}"
      changed_when: true
      # This task might still fail occasionally due to stubborn kernel references
      # on extremely busy root disks. If it does, a reboot is the final solution.
      when: proceed_with_wipe
      failed_when: false
      tags: wipe

    - name: Get disk size in 512-byte sectors for dd operation
      ansible.builtin.command: "blockdev --getsz {{ target_disk }}"
      register: disk_sectors
      changed_when: false
      when: proceed_with_wipe
      tags: wipe

    - name: Zero out the last 2MB of the disk to clear backup GPT header (if GPT)
      ansible.builtin.shell: | # Use 'shell' module instead of 'command'
        dd if=/dev/zero of={{ target_disk }} bs=1M seek=$(( ({{ disk_sectors.stdout | int }} * 512 / (1024*1024)) - 2 )) count=2 conv=notrunc
      changed_when: true
      when: proceed_with_wipe and disk_sectors.stdout is defined
      tags: wipe

    - name: Sync disk to ensure all changes are written
      ansible.builtin.command: "sync"
      changed_when: false
      when: proceed_with_wipe
      tags: wipe

    - name: Notify successful disk wipe
      ansible.builtin.debug:
        msg: "Disk {{ target_disk }} has been successfully wiped and prepared for reinstallation. The server is now ready
          for a fresh OS install."
      when: proceed_with_wipe
      tags: wipe

    - name: Reboot the server (if desired for reinstallation)
      ansible.builtin.reboot:
        reboot_timeout: 600 # Wait up to 10 minutes for reboot
      # This step will only run if the target disk IS the OS disk and you need to boot into installation media.
      # For re-installing on the *same* disk, this reboot should be into PXE/ISO/etc.
      when: proceed_with_wipe
      tags: reboot
